(base) master@node1:/repos/edgeruler_evaluation/edgeruler_code/INFOCOM/raw_data$ CoER
CoER: command not found
(base) master@node1:/repos/edgeruler_evaluation/edgeruler_code/INFOCOM/raw_data$ python ER.py 
--------calculating, format:[r, t_find, exe, rule_id, pred]---------
calculate:0, s_min:6, cost:0.0, solution:[[4.0, 4, 9, 1, 5], [12.0, 4, 7, 1, 5]]
calculate:20, s_min:6, cost:0.0, solution:[[4.0, 23, 28, 1, 4], [12.0, 23, 26, 1, 4]]
calculate:30, s_min:6, cost:0.0, solution:[[4.0, 35, 40, 1, 6], [12.0, 35, 38, 1, 6]]
calculate:50, s_min:6, cost:0.0, solution:[[4.0, 50, 55, 1, 1], [12.0, 50, 53, 1, 1]]
calculate:60, s_min:8, cost:0.0, solution:[[6.0, 60, 64, 1, 0], [6.0, 60, 64, 1, 0]]
calculate:70, s_min:14, cost:0.01, solution:[[4.0, 70, 75, 1, 1], [4.0, 70, 75, 1, 1], [8.0, 70, 77, 5, 1]]
calculate:100, s_min:13, cost:0.01, solution:[[4.0, 105, 110, 1, 6], [4.0, 105, 110, 1, 6], [8.0, 105, 112, 3, 7]]
calculate:110, s_min:6, cost:0.0, solution:[[12.0, 112, 121, 7, 5]]
calculate:130, s_min:6, cost:0.0, solution:[[4.0, 130, 135, 1, 1], [12.0, 130, 133, 1, 1]]
calculate:170, s_min:6, cost:0.0, solution:[[4.0, 176, 181, 1, 7], [12.0, 176, 179, 1, 7]]
calculate:180, s_min:15, cost:0.01, solution:[[4.0, 181, 186, 1, 2], [12.0, 181, 184, 1, 2], [12.0, 184, 196, 9, 7]]
calculate:190, ddl-latency:2, cost:0.0, solution:[[4.0, 192, 197, 1, 3], [12.0, 196, 199, 1, 3]]
calculate:200, s_min:8, cost:0.0, solution:[[6.0, 200, 204, 1, 0], [6.0, 200, 204, 1, 0]]
calculate:210, s_min:6, cost:0.0, solution:[[12.0, 213, 222, 7, 6]]
calculate:220, ddl-latency:0, cost:0.0, solution:[[4.0, 220, 225, 1, 1], [12.0, 222, 225, 1, 1]]
calculate:230, s_min:24, cost:0.0, solution:[[8.0, 230, 243, 9, 0], [8.0, 230, 243, 10, 2]]
calculate:250, s_min:8, cost:0.0, solution:[[6.0, 250, 254, 1, 0], [6.0, 250, 254, 1, 0]]
calculate:260, s_min:15, cost:0.01, solution:[[6.0, 264, 275, 8, 7], [4.0, 267, 272, 1, 8], [6.0, 267, 271, 1, 8]]
calculate:280, s_min:6, cost:0.0, solution:[[4.0, 284, 289, 1, 5], [12.0, 284, 287, 1, 5]]
calculate:290, s_min:12, cost:0.03, solution:[[4.0, 292, 297, 1, 3], [12.0, 292, 295, 1, 3], [6.0, 295, 299, 1, 6], [6.0, 295, 299, 1, 6]]
calculate:300, s_min:12, cost:0.01, solution:[[4.0, 300, 305, 1, 1], [12.0, 300, 303, 1, 1], [4.0, 306, 311, 1, 7], [12.0, 306, 309, 1, 7]]
calculate:310, s_min:8, cost:0.0, solution:[[6.0, 310, 314, 1, 0], [6.0, 310, 314, 1, 0]]
calculate:320, s_min:15, cost:0.01, solution:[[6.0, 320, 324, 1, 0], [6.0, 320, 324, 1, 0], [4.0, 323, 328, 1, 4], [12.0, 324, 327, 1, 4]]
calculate:330, s_min:14, cost:0.01, solution:[[6.0, 330, 334, 1, 0], [6.0, 330, 334, 1, 0], [4.0, 335, 340, 1, 6], [12.0, 335, 338, 1, 6]]
calculate:340, s_min:6, cost:0.0, solution:[[4.0, 348, 353, 1, 9], [12.0, 348, 351, 1, 9]]
calculate:350, ddl-latency:0, cost:0.1, solution:[[6.0, 351, 355, 1, 1], [6.0, 351, 355, 1, 1], [4.0, 353, 358, 1, 4], [12.0, 355, 358, 1, 4]]
calculate:360, s_min:6, cost:0.0, solution:[[4.0, 363, 368, 1, 4], [12.0, 363, 366, 1, 4]]
calculate:370, s_min:6, cost:0.0, solution:[[4.0, 370, 375, 1, 1], [12.0, 370, 373, 1, 1]]
calculate:380, s_min:6, cost:0.0, solution:[[4.0, 385, 390, 1, 6], [12.0, 385, 388, 1, 6]]
calculate:390, s_min:6, cost:0.0, solution:[[4.0, 392, 397, 1, 3], [12.0, 392, 395, 1, 3]]
calculate:400, s_min:6, cost:0.0, solution:[[4.0, 403, 408, 1, 4], [12.0, 403, 406, 1, 4]]
calculate:410, s_min:6, cost:0.0, solution:[[4.0, 418, 423, 1, 9], [12.0, 418, 421, 1, 9]]
calculate:420, s_min:17, cost:0.0, solution:[[6.0, 421, 432, 6, 2], [4.0, 424, 429, 1, 5], [6.0, 424, 428, 1, 5]]
calculate:430, s_min:38, cost:0.01, solution:[[4.0, 432, 451, 9, 6], [4.0, 432, 451, 10, 6], [4.0, 433, 438, 1, 4], [4.0, 433, 438, 1, 4]]
calculate:440, ddl-latency:8, cost:0.1, solution:[[4.0, 441, 455, 8, 4], [8.0, 451, 458, 3, 7], [4.0, 446, 451, 1, 7], [4.0, 451, 456, 1, 7]]
calculate:450, ddl-latency:13, cost:0.0, solution:[[4.0, 455, 460, 1, 0], [4.0, 456, 461, 1, 0]]
calculate:460, s_min:6, cost:0.0, solution:[[4.0, 464, 469, 1, 5], [12.0, 464, 467, 1, 5]]
calculate:470, s_min:14, cost:0.01, solution:[[4.0, 475, 480, 1, 6], [12.0, 475, 478, 1, 6], [6.0, 478, 482, 1, 8], [6.0, 478, 482, 1, 8]]
calculate:480, ddl-latency:2, cost:0.0, solution:[[4.0, 480, 485, 1, 0], [12.0, 482, 485, 1, 0]]
calculate:490, s_min:13, cost:0.0, solution:[[8.0, 490, 500, 7, 0], [6.0, 492, 496, 1, 3]]
calculate:500, s_min:6, cost:0.0, solution:[[4.0, 500, 505, 1, 1], [12.0, 500, 503, 1, 1]]
calculate:510, s_min:14, cost:0.01, solution:[[4.0, 515, 520, 1, 6], [12.0, 515, 518, 1, 6], [6.0, 518, 522, 1, 8], [6.0, 518, 522, 1, 8]]
calculate:520, ddl-latency:2, cost:0.1, solution:[[4.0, 520, 525, 1, 0], [12.0, 522, 525, 1, 0], [6.0, 525, 529, 1, 5], [6.0, 525, 529, 1, 5]]
calculate:530, s_min:11, cost:0.0, solution:[[8.0, 530, 540, 7, 2], [6.0, 532, 536, 1, 3]]
calculate:540, ddl-latency:0, cost:0.11, solution:[[6.0, 540, 544, 1, 0], [6.0, 540, 544, 1, 0], [4.0, 542, 547, 1, 3], [12.0, 544, 547, 1, 3]]
calculate:550, ddl-latency:1, cost:0.11, solution:[[4.0, 550, 569, 9, 3], [4.0, 550, 569, 10, 4], [4.0, 554, 559, 1, 5], [4.0, 554, 559, 1, 5]]
calculate:560, ddl-latency:4, cost:0.02, solution:[[4.0, 560, 574, 7, 2], [4.0, 564, 569, 1, 5], [12.0, 569, 572, 1, 5]]
calculate:570, ddl-latency:2, cost:0.0, solution:[[6.0, 572, 576, 1, 1], [6.0, 572, 576, 1, 1]]
calculate:580, s_min:6, cost:0.0, solution:[[4.0, 581, 586, 1, 2], [12.0, 581, 584, 1, 2]]
calculate:590, s_min:6, cost:0.0, solution:[[4.0, 593, 598, 1, 4], [12.0, 593, 596, 1, 4]]
calculate:600, s_min:6, cost:0.0, solution:[[4.0, 601, 606, 1, 2], [12.0, 601, 604, 1, 2]]
calculate:610, s_min:8, cost:0.0, solution:[[6.0, 610, 614, 1, 0], [6.0, 610, 614, 1, 0]]
calculate:620, s_min:13, cost:0.0, solution:[[8.0, 620, 630, 7, 0], [6.0, 620, 624, 1, 1]]
calculate:630, s_min:6, cost:0.0, solution:[[12.0, 631, 640, 8, 4]]
calculate:640, s_min:8, cost:0.0, solution:[[6.0, 640, 644, 1, 0], [6.0, 640, 644, 1, 0]]
calculate:650, s_min:30, cost:0.01, solution:[[4.0, 650, 664, 8, 3], [4.0, 652, 666, 7, 5], [4.0, 656, 661, 1, 7], [4.0, 656, 661, 1, 7]]
calculate:660, s_min:6, cost:0.0, solution:[[4.0, 667, 672, 1, 8], [12.0, 667, 670, 1, 8]]
calculate:670, s_min:6, cost:0.0, solution:[[12.0, 675, 684, 7, 8]]
calculate:680, ddl-latency:4, cost:0.0, solution:[[4.0, 680, 685, 1, 0], [12.0, 684, 687, 1, 0]]
calculate:700, s_min:4, cost:0.0, solution:[[12.0, 707, 713, 5, 9]]
calculate:760, s_min:6, cost:0.0, solution:[[12.0, 764, 773, 6, 7]]
calculate:790, s_min:9, cost:0.0, solution:[[12.0, 790, 799, 8, 0]]
calculate:820, s_min:6, cost:0.0, solution:[[12.0, 821, 830, 8, 4]]
calculate:850, s_min:6, cost:0.0, solution:[[4.0, 857, 862, 1, 8], [12.0, 857, 860, 1, 8]]
calculate:860, s_min:6, cost:0.0, solution:[[4.0, 865, 870, 1, 6], [12.0, 865, 868, 1, 6]]
calculate:880, s_min:36, cost:0.0, solution:[[6.0, 880, 891, 8, 2], [6.0, 880, 895, 9, 3], [4.0, 880, 899, 10, 4]]
calculate:890, s_min:6, cost:0.0, solution:[[6.0, 891, 899, 5, 3]]
calculate:920, s_min:8, cost:0.0, solution:[[12.0, 920, 929, 8, 1]]
calculate:950, s_min:14, cost:0.01, solution:[[4.0, 954, 959, 1, 5], [12.0, 954, 957, 1, 5], [6.0, 957, 961, 1, 7], [6.0, 957, 961, 1, 7]]
calculate:960, s_min:7, cost:0.0, solution:[[4.0, 960, 965, 1, 1], [12.0, 961, 964, 1, 1]]
calculate:970, s_min:12, cost:0.02, solution:[[6.0, 973, 977, 1, 4], [6.0, 973, 977, 1, 4], [4.0, 977, 982, 1, 8], [12.0, 977, 980, 1, 8]]
calculate:980, s_min:8, cost:0.0, solution:[[6.0, 980, 984, 1, 0], [6.0, 980, 984, 1, 0]]
calculate:990, s_min:6, cost:0.0, solution:[[4.0, 990, 995, 1, 1], [12.0, 990, 993, 1, 1]]
-------------result of horizon:10, delta:0--------------
10, 0.07643321513002364, 0.14894206986744227
10, 4.786127167630058, 2.969894197084116
10, 36.369942196531795, 24.91570949517196
10, 0.01152165948528133, 0.02647863450604345



(base) master@node1:/repos/edgeruler_evaluation/edgeruler_code/INFOCOM/raw_data$ ERER
ERER: command not found
(base) master@node1:/repos/edgeruler_evaluation/edgeruler_code/INFOCOM/raw_data$ python ER.py 
--------calculating, format:[r, t_find, exe, rule_id, pred]---------
calculate:0, s_min:12, cost:0.0, solution:[[8.0, 0, 10, 7, 1], [6.0, 4, 8, 1, 5], [4.0, 8, 13, 1]]
calculate:20, s_min:6, cost:0.0, solution:[[4.0, 23, 28, 1, 4], [12.0, 23, 26, 1, 4]]
calculate:30, s_min:16, cost:0.0, solution:[[8.0, 30, 40, 7, 1], [8.0, 30, 40, 7, 3], [4.0, 40, 45, 1], [4.0, 40, 45, 1]]
calculate:50, s_min:6, cost:0.0, solution:[[4.0, 50, 55, 1, 1], [12.0, 50, 53, 1, 1]]
calculate:60, s_min:8, cost:0.0, solution:[[6.0, 60, 64, 1, 0], [6.0, 60, 64, 1, 0]]
calculate:70, s_min:10, cost:0.0, solution:[[8.0, 70, 77, 3, 0], [6.0, 70, 74, 1, 1], [4.0, 74, 79, 1], [4.0, 74, 84, 5]]
calculate:100, s_min:21, cost:0.01, solution:[[12.0, 100, 106, 3, 1], [4.0, 103, 113, 3, 5], [6.0, 106, 110, 1, 6], [6.0, 106, 110, 1, 6]]
calculate:110, s_min:8, cost:0.0, solution:[[12.0, 110, 119, 7, 1]]
calculate:130, s_min:12, cost:0.01, solution:[[4.0, 130, 135, 1, 1], [12.0, 130, 133, 1, 1], [4.0, 137, 142, 1, 8], [12.0, 137, 140, 1, 8]]
calculate:170, s_min:6, cost:0.0, solution:[[4.0, 176, 181, 1, 7], [12.0, 176, 179, 1, 7]]
calculate:180, s_min:15, cost:0.01, solution:[[4.0, 181, 186, 1, 2], [12.0, 181, 184, 1, 2], [12.0, 184, 196, 9, 7]]
calculate:190, ddl-latency:4, cost:0.02, solution:[[6.0, 196, 211, 9, 5], [4.0, 192, 197, 1, 3], [6.0, 196, 200, 1, 3]]
calculate:200, ddl-latency:1, cost:0.11, solution:[[4.0, 200, 205, 1, 0], [6.0, 200, 204, 1, 0], [6.0, 204, 215, 7, 6], [4.0, 206, 220, 7, 9]]
calculate:210, ddl-latency:1, cost:0.0, solution:[[4.0, 216, 230, 7]]
calculate:220, s_min:6, cost:0.0, solution:[[6.0, 220, 224, 1, 1], [6.0, 220, 224, 1, 1]]
calculate:230, ddl-latency:5, cost:0.11, solution:[[6.0, 230, 245, 9, 0], [4.0, 230, 249, 10, 2], [6.0, 232, 236, 1, 3], [6.0, 236, 240, 1, 3]]
calculate:250, s_min:8, cost:0.0, solution:[[6.0, 250, 254, 1, 0], [6.0, 250, 254, 1, 0]]
calculate:260, s_min:15, cost:0.01, solution:[[6.0, 264, 275, 8, 7], [4.0, 267, 272, 1, 8], [6.0, 267, 271, 1, 8]]
calculate:280, s_min:6, cost:0.0, solution:[[4.0, 284, 289, 1, 5], [12.0, 284, 287, 1, 5]]
calculate:290, s_min:6, cost:0.0, solution:[[4.0, 292, 297, 1, 3], [12.0, 292, 295, 1, 3], [4.0, 296, 301, 1], [4.0, 296, 301, 1]]
calculate:300, s_min:7, cost:0.0, solution:[[4.0, 300, 305, 1, 1], [12.0, 301, 304, 1, 1], [4.0, 307, 312, 1], [4.0, 307, 312, 1]]
calculate:310, ddl-latency:2, cost:0.0, solution:[[4.0, 310, 315, 1, 0], [4.0, 310, 315, 1, 0]]
calculate:320, s_min:8, cost:0.0, solution:[[6.0, 320, 324, 1, 0], [6.0, 320, 324, 1, 0], [4.0, 324, 329, 1], [4.0, 324, 329, 1]]
calculate:330, s_min:14, cost:0.0, solution:[[6.0, 330, 334, 1, 0], [6.0, 330, 334, 1, 0], [4.0, 335, 340, 1, 6], [12.0, 335, 338, 1, 6]]
calculate:340, s_min:6, cost:0.0, solution:[[4.0, 348, 353, 1, 9], [12.0, 348, 351, 1, 9]]
calculate:350, ddl-latency:0, cost:0.12, solution:[[6.0, 351, 355, 1, 1], [6.0, 351, 355, 1, 1], [4.0, 353, 358, 1, 4], [12.0, 355, 358, 1, 4]]
calculate:360, s_min:6, cost:0.0, solution:[[4.0, 363, 368, 1, 4], [12.0, 363, 366, 1, 4]]
calculate:370, s_min:6, cost:0.0, solution:[[4.0, 370, 375, 1, 1], [12.0, 370, 373, 1, 1]]
calculate:380, s_min:6, cost:0.0, solution:[[4.0, 385, 390, 1, 6], [12.0, 385, 388, 1, 6]]
calculate:390, s_min:6, cost:0.0, solution:[[4.0, 392, 397, 1, 3], [12.0, 392, 395, 1, 3]]
calculate:400, s_min:6, cost:0.0, solution:[[4.0, 403, 408, 1, 4], [12.0, 403, 406, 1, 4]]
calculate:410, s_min:6, cost:0.0, solution:[[4.0, 418, 423, 1, 9], [12.0, 418, 421, 1, 9]]
calculate:420, s_min:17, cost:0.0, solution:[[6.0, 421, 432, 6, 2], [4.0, 424, 429, 1, 5], [6.0, 424, 428, 1, 5]]
calculate:430, s_min:38, cost:0.01, solution:[[4.0, 432, 451, 9, 6], [4.0, 432, 451, 10, 6], [4.0, 433, 438, 1, 4], [4.0, 433, 438, 1, 4]]
calculate:440, ddl-latency:8, cost:0.11, solution:[[4.0, 441, 455, 8, 4], [8.0, 451, 458, 3, 7], [4.0, 446, 451, 1, 7], [4.0, 451, 456, 1, 7]]
calculate:450, ddl-latency:13, cost:0.0, solution:[[4.0, 455, 460, 1, 0], [4.0, 456, 461, 1, 0]]
calculate:460, s_min:6, cost:0.0, solution:[[4.0, 464, 469, 1, 5], [12.0, 464, 467, 1, 5]]
calculate:470, s_min:14, cost:0.01, solution:[[4.0, 475, 480, 1, 6], [12.0, 475, 478, 1, 6], [6.0, 478, 482, 1, 8], [6.0, 478, 482, 1, 8]]
calculate:480, ddl-latency:2, cost:0.0, solution:[[4.0, 480, 485, 1, 0], [12.0, 482, 485, 1, 0]]
calculate:490, s_min:13, cost:0.0, solution:[[8.0, 490, 500, 7, 0], [6.0, 492, 496, 1, 3]]
calculate:500, s_min:6, cost:0.0, solution:[[4.0, 500, 505, 1, 1], [12.0, 500, 503, 1, 1]]
calculate:510, s_min:14, cost:0.01, solution:[[4.0, 515, 520, 1, 6], [12.0, 515, 518, 1, 6], [6.0, 518, 522, 1, 8], [6.0, 518, 522, 1, 8]]
calculate:520, ddl-latency:2, cost:0.1, solution:[[4.0, 520, 525, 1, 0], [12.0, 522, 525, 1, 0], [6.0, 525, 529, 1, 5], [6.0, 525, 529, 1, 5]]
calculate:530, s_min:11, cost:0.0, solution:[[8.0, 530, 540, 7, 2], [6.0, 532, 536, 1, 3]]
calculate:540, ddl-latency:0, cost:0.1, solution:[[6.0, 540, 544, 1, 0], [6.0, 540, 544, 1, 0], [4.0, 542, 547, 1, 3], [12.0, 544, 547, 1, 3]]
calculate:550, ddl-latency:1, cost:0.11, solution:[[4.0, 550, 569, 9, 3], [4.0, 550, 569, 10, 4], [4.0, 554, 559, 1, 5], [4.0, 554, 559, 1, 5]]
calculate:560, ddl-latency:4, cost:0.02, solution:[[4.0, 560, 574, 7, 2], [4.0, 564, 569, 1, 5], [12.0, 569, 572, 1, 5]]
calculate:570, ddl-latency:2, cost:0.0, solution:[[6.0, 572, 576, 1, 1], [6.0, 572, 576, 1, 1]]
calculate:580, s_min:6, cost:0.0, solution:[[4.0, 581, 586, 1, 2], [12.0, 581, 584, 1, 2]]
calculate:590, s_min:6, cost:0.0, solution:[[4.0, 593, 598, 1, 4], [12.0, 593, 596, 1, 4]]
calculate:600, s_min:6, cost:0.0, solution:[[4.0, 601, 606, 1, 2], [12.0, 601, 604, 1, 2]]
calculate:610, s_min:8, cost:0.0, solution:[[6.0, 610, 614, 1, 0], [6.0, 610, 614, 1, 0]]
calculate:620, s_min:13, cost:0.0, solution:[[8.0, 620, 630, 7, 0], [6.0, 620, 624, 1, 1]]
calculate:630, s_min:6, cost:0.0, solution:[[12.0, 631, 640, 8, 4]]
calculate:640, s_min:8, cost:0.0, solution:[[6.0, 640, 644, 1, 0], [6.0, 640, 644, 1, 0]]
calculate:650, s_min:30, cost:0.01, solution:[[4.0, 650, 664, 8, 3], [4.0, 652, 666, 7, 5], [4.0, 656, 661, 1, 7], [4.0, 656, 661, 1, 7]]
calculate:660, s_min:6, cost:0.0, solution:[[4.0, 667, 672, 1, 8], [12.0, 667, 670, 1, 8]]
calculate:670, s_min:6, cost:0.0, solution:[[12.0, 675, 684, 7, 8]]
calculate:680, ddl-latency:4, cost:0.0, solution:[[4.0, 680, 685, 1, 0], [12.0, 684, 687, 1, 0]]
calculate:700, s_min:4, cost:0.0, solution:[[12.0, 707, 713, 5, 9]]
calculate:760, s_min:6, cost:0.0, solution:[[12.0, 764, 773, 6, 7]]
calculate:790, s_min:9, cost:0.0, solution:[[12.0, 790, 799, 8, 0]]
calculate:820, s_min:6, cost:0.0, solution:[[12.0, 821, 830, 8, 4]]
calculate:850, s_min:6, cost:0.0, solution:[[4.0, 857, 862, 1, 8], [12.0, 857, 860, 1, 8]]
calculate:860, s_min:6, cost:0.0, solution:[[4.0, 865, 870, 1, 6], [12.0, 865, 868, 1, 6]]
calculate:880, s_min:36, cost:0.0, solution:[[6.0, 880, 891, 8, 2], [6.0, 880, 895, 9, 3], [4.0, 880, 899, 10, 4]]
calculate:890, s_min:6, cost:0.0, solution:[[6.0, 891, 899, 5, 3]]
calculate:920, s_min:8, cost:0.0, solution:[[12.0, 920, 929, 8, 1]]
calculate:950, s_min:14, cost:0.01, solution:[[4.0, 954, 959, 1, 5], [12.0, 954, 957, 1, 5], [6.0, 957, 961, 1, 7], [6.0, 957, 961, 1, 7]]
calculate:960, s_min:7, cost:0.0, solution:[[4.0, 960, 965, 1, 1], [12.0, 961, 964, 1, 1]]
calculate:970, s_min:12, cost:0.02, solution:[[6.0, 973, 977, 1, 4], [6.0, 973, 977, 1, 4], [4.0, 977, 982, 1, 8], [12.0, 977, 980, 1, 8]]
calculate:980, s_min:8, cost:0.0, solution:[[6.0, 980, 984, 1, 0], [6.0, 980, 984, 1, 0]]
calculate:990, s_min:6, cost:0.0, solution:[[4.0, 990, 995, 1, 1], [12.0, 990, 993, 1, 1]]
-------------result of horizon:10, delta:0--------------
10, 0.1327275413711584, 0.16565002044750127
10, 5.0520231213872835, 3.1865741171536333
10, 36.55135135135135, 24.45445657816771
10, 0.01410144322539029, 0.0309925082715362


CORO
--------calculating, format:[r, t_find, exe, rule_id, pred]---------
calculate:0, s_min:6, cost:0.05, solution:[[4.0, 4, 9, 1], [12.0, 4, 7, 1]]
calculate:20, s_min:6, cost:0.04, solution:[[4.0, 23, 28, 1], [12.0, 23, 26, 1]]
calculate:30, s_min:6, cost:0.06, solution:[[4.0, 35, 40, 1], [12.0, 35, 38, 1]]
calculate:50, s_min:6, cost:0.02, solution:[[4.0, 50, 55, 1], [12.0, 50, 53, 1]]
calculate:60, s_min:8, cost:0.01, solution:[[6.0, 60, 64, 1], [6.0, 60, 64, 1]]
calculate:70, s_min:14, cost:2.07, solution:[[4.0, 70, 75, 1], [4.0, 70, 75, 1], [8.0, 70, 77, 5]]
calculate:100, s_min:13, cost:9.38, solution:[[4.0, 105, 110, 1], [4.0, 105, 110, 1], [8.0, 105, 112, 3]]
calculate:110, s_min:6, cost:0.0, solution:[[12.0, 112, 121, 7]]
calculate:130, s_min:6, cost:0.02, solution:[[4.0, 130, 135, 1], [12.0, 130, 133, 1]]
calculate:170, s_min:6, cost:0.07, solution:[[4.0, 176, 181, 1], [12.0, 176, 179, 1]]
calculate:180, s_min:15, cost:27.77, solution:[[4.0, 181, 186, 1], [12.0, 181, 184, 1], [12.0, 184, 196, 9]]
calculate:190, ddl-latency:2, cost:0.09, solution:[[4.0, 192, 197, 1], [12.0, 196, 199, 1]]
calculate:200, s_min:8, cost:0.01, solution:[[6.0, 200, 204, 1], [6.0, 200, 204, 1]]
calculate:210, s_min:6, cost:0.0, solution:[[12.0, 213, 222, 7]]
calculate:220, s_min:8, cost:0.01, solution:[[4.0, 220, 225, 1], [12.0, 222, 225, 1]]
calculate:230, s_min:24, cost:0.16, solution:[[8.0, 230, 243, 9], [8.0, 230, 243, 10]]
calculate:250, s_min:8, cost:0.01, solution:[[6.0, 250, 254, 1], [6.0, 250, 254, 1]]
calculate:260, s_min:15, cost:16.49, solution:[[6.0, 264, 275, 8], [4.0, 267, 272, 1], [6.0, 267, 271, 1]]
calculate:280, s_min:6, cost:0.05, solution:[[4.0, 284, 289, 1], [12.0, 284, 287, 1]]
calculate:290, s_min:12, cost:131.97, solution:[[4.0, 292, 297, 1], [12.0, 292, 295, 1], [6.0, 295, 299, 1], [6.0, 295, 299, 1]]
calculate:300, s_min:12, cost:198.9, solution:[[4.0, 300, 305, 1], [12.0, 300, 303, 1], [4.0, 306, 311, 1], [12.0, 306, 309, 1]]
calculate:310, s_min:8, cost:0.01, solution:[[6.0, 310, 314, 1], [6.0, 310, 314, 1]]
calculate:320, s_min:15, cost:51.87, solution:[[6.0, 320, 324, 1], [6.0, 320, 324, 1], [4.0, 323, 328, 1], [12.0, 324, 327, 1]]
calculate:330, s_min:14, cost:124.54, solution:[[6.0, 330, 334, 1], [6.0, 330, 334, 1], [4.0, 335, 340, 1], [12.0, 335, 338, 1]]
calculate:340, s_min:6, cost:0.09, solution:[[4.0, 348, 353, 1], [12.0, 348, 351, 1]]
calculate:350, s_min:16, cost:51.06, solution:[[6.0, 351, 355, 1], [6.0, 351, 355, 1], [4.0, 353, 358, 1], [12.0, 355, 358, 1]]
calculate:360, s_min:6, cost:0.03, solution:[[4.0, 363, 368, 1], [12.0, 363, 366, 1]]
calculate:370, s_min:6, cost:0.01, solution:[[4.0, 370, 375, 1], [12.0, 370, 373, 1]]
calculate:380, s_min:6, cost:0.05, solution:[[4.0, 385, 390, 1], [12.0, 385, 388, 1]]
calculate:390, s_min:6, cost:0.03, solution:[[4.0, 392, 397, 1], [12.0, 392, 395, 1]]
calculate:400, s_min:6, cost:0.03, solution:[[4.0, 403, 408, 1], [12.0, 403, 406, 1]]
calculate:410, s_min:6, cost:0.09, solution:[[4.0, 418, 423, 1], [12.0, 418, 421, 1]]
calculate:420, s_min:17, cost:5.72, solution:[[6.0, 421, 432, 6], [4.0, 424, 429, 1], [6.0, 424, 428, 1]]
calculate:430, s_min:32, cost:2381.44, solution:[[4.0, 433, 438, 1], [4.0, 433, 438, 1], [8.0, 432, 445, 9], [8.0, 438, 451, 10]]
calculate:440, ddl-latency:9, cost:6467.6, solution:[[8.0, 451, 461, 8], [4.0, 446, 451, 1], [4.0, 446, 451, 1], [8.0, 451, 458, 3]]
calculate:450, ddl-latency:18, cost:0.12, solution:[[4.0, 458, 463, 1], [4.0, 458, 463, 1]]
calculate:460, s_min:6, cost:0.04, solution:[[4.0, 464, 469, 1], [12.0, 464, 467, 1]]
calculate:470, s_min:14, cost:259.93, solution:[[4.0, 475, 480, 1], [12.0, 475, 478, 1], [6.0, 478, 482, 1], [6.0, 478, 482, 1]]
calculate:480, ddl-latency:2, cost:0.03, solution:[[4.0, 480, 485, 1], [12.0, 482, 485, 1]]
calculate:490, s_min:13, cost:0.06, solution:[[8.0, 490, 500, 7], [6.0, 492, 496, 1]]
calculate:500, s_min:6, cost:0.01, solution:[[4.0, 500, 505, 1], [12.0, 500, 503, 1]]
calculate:510, s_min:14, cost:258.2, solution:[[4.0, 515, 520, 1], [12.0, 515, 518, 1], [6.0, 518, 522, 1], [6.0, 518, 522, 1]]
calculate:520, ddl-latency:2, cost:216.94, solution:[[4.0, 520, 525, 1], [12.0, 522, 525, 1], [6.0, 525, 529, 1], [6.0, 525, 529, 1]]
calculate:530, s_min:11, cost:0.09, solution:[[8.0, 530, 540, 7], [6.0, 532, 536, 1]]
calculate:540, s_min:16, cost:29.2, solution:[[6.0, 540, 544, 1], [6.0, 540, 544, 1], [4.0, 542, 547, 1], [12.0, 544, 547, 1]]
calculate:550, ddl-latency:1, cost:4079.81, solution:[[4.0, 550, 569, 9], [4.0, 550, 569, 10], [4.0, 554, 559, 1], [4.0, 554, 559, 1]]
calculate:560, ddl-latency:4, cost:25.63, solution:[[4.0, 560, 574, 7], [4.0, 564, 569, 1], [12.0, 569, 572, 1]]
calculate:570, ddl-latency:2, cost:0.05, solution:[[6.0, 572, 576, 1], [6.0, 572, 576, 1]]
calculate:580, s_min:6, cost:0.02, solution:[[4.0, 581, 586, 1], [12.0, 581, 584, 1]]
calculate:590, s_min:6, cost:0.03, solution:[[4.0, 593, 598, 1], [12.0, 593, 596, 1]]
calculate:600, s_min:6, cost:0.02, solution:[[4.0, 601, 606, 1], [12.0, 601, 604, 1]]
calculate:610, s_min:8, cost:0.01, solution:[[6.0, 610, 614, 1], [6.0, 610, 614, 1]]
calculate:620, s_min:13, cost:0.06, solution:[[8.0, 620, 630, 7], [6.0, 620, 624, 1]]
calculate:630, s_min:6, cost:0.0, solution:[[12.0, 631, 640, 8]]
calculate:640, s_min:8, cost:0.01, solution:[[6.0, 640, 644, 1], [6.0, 640, 644, 1]]
calculate:650, s_min:30, cost:880.61, solution:[[4.0, 650, 664, 8], [4.0, 652, 666, 7], [4.0, 656, 661, 1], [4.0, 656, 661, 1]]
calculate:660, s_min:6, cost:0.07, solution:[[4.0, 667, 672, 1], [12.0, 667, 670, 1]]
calculate:670, s_min:6, cost:0.0, solution:[[12.0, 675, 684, 7]]
calculate:680, ddl-latency:4, cost:0.04, solution:[[4.0, 680, 685, 1], [12.0, 684, 687, 1]]
calculate:700, s_min:4, cost:0.0, solution:[[12.0, 707, 713, 5]]
calculate:760, s_min:6, cost:0.0, solution:[[12.0, 764, 773, 6]]
calculate:790, s_min:9, cost:0.0, solution:[[12.0, 790, 799, 8]]
calculate:820, s_min:6, cost:0.0, solution:[[12.0, 821, 830, 8]]
calculate:850, s_min:6, cost:0.07, solution:[[4.0, 857, 862, 1], [12.0, 857, 860, 1]]
calculate:860, s_min:6, cost:0.05, solution:[[4.0, 865, 870, 1], [12.0, 865, 868, 1]]
calculate:880, s_min:36, cost:16.5, solution:[[6.0, 880, 891, 8], [6.0, 880, 895, 9], [4.0, 880, 899, 10]]
calculate:890, s_min:6, cost:0.0, solution:[[6.0, 891, 899, 5]]
calculate:920, s_min:8, cost:0.0, solution:[[12.0, 920, 929, 8]]
calculate:950, s_min:14, cost:167.13, solution:[[4.0, 954, 959, 1], [12.0, 954, 957, 1], [6.0, 957, 961, 1], [6.0, 957, 961, 1]]
calculate:960, s_min:7, cost:0.01, solution:[[4.0, 960, 965, 1], [12.0, 961, 964, 1]]
calculate:970, s_min:12, cost:233.29, solution:[[4.0, 973, 978, 1], [12.0, 973, 976, 1], [6.0, 977, 981, 1], [6.0, 977, 981, 1]]
calculate:980, ddl-latency:1, cost:0.02, solution:[[4.0, 980, 985, 1], [12.0, 981, 984, 1]]
calculate:990, s_min:6, cost:0.01, solution:[[4.0, 990, 995, 1], [12.0, 990, 993, 1]]
-------------result of horizon:10--------------
10, 0.08684988179669031, 0.14747442145690565
10, 4, 3.0
10, 36.87861271676301, 25.76937641571782
10, 214.2164746735194, 927.3317670166895